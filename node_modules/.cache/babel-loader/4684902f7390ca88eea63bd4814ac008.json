{"ast":null,"code":"const indexBy = require(\"lodash.indexby\");\n\nconst collectify = require(\"./util/collectify\");\n\nconst {\n  jsify,\n  downcaseFirst\n} = require(\"./util/string\");\n\nfunction base(resp) {\n  var data = resp.resultSets[0];\n  var headers = data.headers.map(jsify);\n  return collectify(headers, data.rowSet);\n}\n\nfunction general(resp) {\n  return resp.resultSets.reduce(function (ret, set) {\n    var name = downcaseFirst(set.name);\n    ret[name] = collectify(set.headers.map(jsify), set.rowSet);\n    return ret;\n  }, {});\n} // todo make this work identical to update-players.js\n\n\nfunction players(resp) {\n  return base(resp).map(function (player) {\n    var names = player.displayLastCommaFirst.split(\", \").reverse();\n    return {\n      firstName: names[0].trim(),\n      lastName: (names[1] ? names[1] : \"\").trim(),\n      playerId: player.personId,\n      teamId: player.teamId\n    };\n  });\n}\n\nfunction lineups(resp) {\n  function makeLineup(lu) {\n    delete lu.groupSet;\n    lu.playerIds = lu.groupId.split(\" - \").map(Number);\n    return lu;\n  }\n\n  return general(resp).lineups.map(makeLineup);\n}\n\nfunction sportVu(resp) {\n  let temp = general(resp);\n\n  if (temp.length !== 1) {\n    throw new Error(\"Expected sportVu response to have a single result set\");\n  }\n\n  return indexBy(temp[0], \"playerId\");\n}\n\nmodule.exports = {\n  base,\n  general,\n  players,\n  lineups,\n  sportVu\n};","map":{"version":3,"sources":["/Users/mango/Documents/Personal/Web/NBA/node_modules/nba/src/transforms.js"],"names":["indexBy","require","collectify","jsify","downcaseFirst","base","resp","data","resultSets","headers","map","rowSet","general","reduce","ret","set","name","players","player","names","displayLastCommaFirst","split","reverse","firstName","trim","lastName","playerId","personId","teamId","lineups","makeLineup","lu","groupSet","playerIds","groupId","Number","sportVu","temp","length","Error","module","exports"],"mappings":"AAAA,MAAMA,OAAO,GAAGC,OAAO,CAAC,gBAAD,CAAvB;;AAEA,MAAMC,UAAU,GAAGD,OAAO,CAAC,mBAAD,CAA1B;;AACA,MAAM;AACJE,EAAAA,KADI;AAEJC,EAAAA;AAFI,IAGFH,OAAO,CAAC,eAAD,CAHX;;AAKA,SAASI,IAAT,CAAeC,IAAf,EAAqB;AACnB,MAAIC,IAAI,GAAGD,IAAI,CAACE,UAAL,CAAgB,CAAhB,CAAX;AACA,MAAIC,OAAO,GAAGF,IAAI,CAACE,OAAL,CAAaC,GAAb,CAAiBP,KAAjB,CAAd;AACA,SAAOD,UAAU,CAACO,OAAD,EAAUF,IAAI,CAACI,MAAf,CAAjB;AACD;;AAED,SAASC,OAAT,CAAkBN,IAAlB,EAAwB;AACtB,SAAOA,IAAI,CAACE,UAAL,CAAgBK,MAAhB,CAAuB,UAAUC,GAAV,EAAeC,GAAf,EAAoB;AAChD,QAAIC,IAAI,GAAGZ,aAAa,CAACW,GAAG,CAACC,IAAL,CAAxB;AACAF,IAAAA,GAAG,CAACE,IAAD,CAAH,GAAYd,UAAU,CAACa,GAAG,CAACN,OAAJ,CAAYC,GAAZ,CAAgBP,KAAhB,CAAD,EAAyBY,GAAG,CAACJ,MAA7B,CAAtB;AACA,WAAOG,GAAP;AACD,GAJM,EAIJ,EAJI,CAAP;AAKD,C,CAED;;;AACA,SAASG,OAAT,CAAkBX,IAAlB,EAAwB;AACtB,SAAOD,IAAI,CAACC,IAAD,CAAJ,CAAWI,GAAX,CAAe,UAAUQ,MAAV,EAAkB;AACtC,QAAIC,KAAK,GAAGD,MAAM,CAACE,qBAAP,CAA6BC,KAA7B,CAAmC,IAAnC,EAAyCC,OAAzC,EAAZ;AACA,WAAO;AACLC,MAAAA,SAAS,EAAEJ,KAAK,CAAC,CAAD,CAAL,CAASK,IAAT,EADN;AAELC,MAAAA,QAAQ,EAAE,CAACN,KAAK,CAAC,CAAD,CAAL,GAAWA,KAAK,CAAC,CAAD,CAAhB,GAAsB,EAAvB,EAA2BK,IAA3B,EAFL;AAGLE,MAAAA,QAAQ,EAAER,MAAM,CAACS,QAHZ;AAILC,MAAAA,MAAM,EAAEV,MAAM,CAACU;AAJV,KAAP;AAMD,GARM,CAAP;AASD;;AAED,SAASC,OAAT,CAAkBvB,IAAlB,EAAwB;AACtB,WAASwB,UAAT,CAAqBC,EAArB,EAAyB;AACvB,WAAOA,EAAE,CAACC,QAAV;AACAD,IAAAA,EAAE,CAACE,SAAH,GAAeF,EAAE,CAACG,OAAH,CAAWb,KAAX,CAAiB,KAAjB,EAAwBX,GAAxB,CAA4ByB,MAA5B,CAAf;AACA,WAAOJ,EAAP;AACD;;AACD,SAAOnB,OAAO,CAACN,IAAD,CAAP,CAAcuB,OAAd,CAAsBnB,GAAtB,CAA0BoB,UAA1B,CAAP;AACD;;AAED,SAASM,OAAT,CAAkB9B,IAAlB,EAAwB;AACtB,MAAI+B,IAAI,GAAGzB,OAAO,CAACN,IAAD,CAAlB;;AAEA,MAAI+B,IAAI,CAACC,MAAL,KAAgB,CAApB,EAAuB;AACrB,UAAM,IAAIC,KAAJ,CAAU,uDAAV,CAAN;AACD;;AAED,SAAOvC,OAAO,CAACqC,IAAI,CAAC,CAAD,CAAL,EAAU,UAAV,CAAd;AACD;;AAEDG,MAAM,CAACC,OAAP,GAAiB;AAAEpC,EAAAA,IAAF;AAAQO,EAAAA,OAAR;AAAiBK,EAAAA,OAAjB;AAA0BY,EAAAA,OAA1B;AAAmCO,EAAAA;AAAnC,CAAjB","sourcesContent":["const indexBy = require(\"lodash.indexby\");\n\nconst collectify = require(\"./util/collectify\");\nconst {\n  jsify,\n  downcaseFirst,\n} = require(\"./util/string\");\n\nfunction base (resp) {\n  var data = resp.resultSets[0];\n  var headers = data.headers.map(jsify);\n  return collectify(headers, data.rowSet);\n}\n\nfunction general (resp) {\n  return resp.resultSets.reduce(function (ret, set) {\n    var name = downcaseFirst(set.name);\n    ret[name] = collectify(set.headers.map(jsify), set.rowSet);\n    return ret;\n  }, {});\n}\n\n// todo make this work identical to update-players.js\nfunction players (resp) {\n  return base(resp).map(function (player) {\n    var names = player.displayLastCommaFirst.split(\", \").reverse();\n    return {\n      firstName: names[0].trim(),\n      lastName: (names[1] ? names[1] : \"\").trim(),\n      playerId: player.personId,\n      teamId: player.teamId,\n    };\n  });\n}\n\nfunction lineups (resp) {\n  function makeLineup (lu) {\n    delete lu.groupSet;\n    lu.playerIds = lu.groupId.split(\" - \").map(Number);\n    return lu;\n  }\n  return general(resp).lineups.map(makeLineup);\n}\n\nfunction sportVu (resp) {\n  let temp = general(resp);\n\n  if (temp.length !== 1) {\n    throw new Error(\"Expected sportVu response to have a single result set\");\n  }\n\n  return indexBy(temp[0], \"playerId\");\n}\n\nmodule.exports = { base, general, players, lineups, sportVu };\n"]},"metadata":{},"sourceType":"script"}