{"ast":null,"code":"/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseCallback = require('lodash._basecallback'),\n    baseEach = require('lodash._baseeach'),\n    isArray = require('lodash.isarray');\n/**\n * Creates a function that aggregates a collection, creating an accumulator\n * object composed from the results of running each element in the collection\n * through an iteratee. The `setter` sets the keys and values of the accumulator\n * object. If `initializer` is provided initializes the accumulator object.\n *\n * @private\n * @param {Function} setter The function to set keys and values of the accumulator object.\n * @param {Function} [initializer] The function to initialize the accumulator object.\n * @returns {Function} Returns the new aggregator function.\n */\n\n\nfunction createAggregator(setter, initializer) {\n  return function (collection, iteratee, thisArg) {\n    var result = initializer ? initializer() : {};\n    iteratee = baseCallback(iteratee, thisArg, 3);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        setter(result, value, iteratee(value, index, collection), collection);\n      }\n    } else {\n      baseEach(collection, function (value, key, collection) {\n        setter(result, value, iteratee(value, key, collection), collection);\n      });\n    }\n\n    return result;\n  };\n}\n\nmodule.exports = createAggregator;","map":{"version":3,"sources":["/Users/mango/Documents/Personal/Web/NBA/node_modules/lodash._createaggregator/index.js"],"names":["baseCallback","require","baseEach","isArray","createAggregator","setter","initializer","collection","iteratee","thisArg","result","index","length","value","key","module","exports"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA,IAAIA,YAAY,GAAGC,OAAO,CAAC,sBAAD,CAA1B;AAAA,IACIC,QAAQ,GAAGD,OAAO,CAAC,kBAAD,CADtB;AAAA,IAEIE,OAAO,GAAGF,OAAO,CAAC,gBAAD,CAFrB;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AACA,SAASG,gBAAT,CAA0BC,MAA1B,EAAkCC,WAAlC,EAA+C;AAC7C,SAAO,UAASC,UAAT,EAAqBC,QAArB,EAA+BC,OAA/B,EAAwC;AAC7C,QAAIC,MAAM,GAAGJ,WAAW,GAAGA,WAAW,EAAd,GAAmB,EAA3C;AACAE,IAAAA,QAAQ,GAAGR,YAAY,CAACQ,QAAD,EAAWC,OAAX,EAAoB,CAApB,CAAvB;;AAEA,QAAIN,OAAO,CAACI,UAAD,CAAX,EAAyB;AACvB,UAAII,KAAK,GAAG,CAAC,CAAb;AAAA,UACIC,MAAM,GAAGL,UAAU,CAACK,MADxB;;AAGA,aAAO,EAAED,KAAF,GAAUC,MAAjB,EAAyB;AACvB,YAAIC,KAAK,GAAGN,UAAU,CAACI,KAAD,CAAtB;AACAN,QAAAA,MAAM,CAACK,MAAD,EAASG,KAAT,EAAgBL,QAAQ,CAACK,KAAD,EAAQF,KAAR,EAAeJ,UAAf,CAAxB,EAAoDA,UAApD,CAAN;AACD;AACF,KARD,MAQO;AACLL,MAAAA,QAAQ,CAACK,UAAD,EAAa,UAASM,KAAT,EAAgBC,GAAhB,EAAqBP,UAArB,EAAiC;AACpDF,QAAAA,MAAM,CAACK,MAAD,EAASG,KAAT,EAAgBL,QAAQ,CAACK,KAAD,EAAQC,GAAR,EAAaP,UAAb,CAAxB,EAAkDA,UAAlD,CAAN;AACD,OAFO,CAAR;AAGD;;AACD,WAAOG,MAAP;AACD,GAlBD;AAmBD;;AAEDK,MAAM,CAACC,OAAP,GAAiBZ,gBAAjB","sourcesContent":["/**\n * lodash 3.0.0 (Custom Build) <https://lodash.com/>\n * Build: `lodash modern modularize exports=\"npm\" -o ./`\n * Copyright 2012-2015 The Dojo Foundation <http://dojofoundation.org/>\n * Based on Underscore.js 1.7.0 <http://underscorejs.org/LICENSE>\n * Copyright 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors\n * Available under MIT license <https://lodash.com/license>\n */\nvar baseCallback = require('lodash._basecallback'),\n    baseEach = require('lodash._baseeach'),\n    isArray = require('lodash.isarray');\n\n/**\n * Creates a function that aggregates a collection, creating an accumulator\n * object composed from the results of running each element in the collection\n * through an iteratee. The `setter` sets the keys and values of the accumulator\n * object. If `initializer` is provided initializes the accumulator object.\n *\n * @private\n * @param {Function} setter The function to set keys and values of the accumulator object.\n * @param {Function} [initializer] The function to initialize the accumulator object.\n * @returns {Function} Returns the new aggregator function.\n */\nfunction createAggregator(setter, initializer) {\n  return function(collection, iteratee, thisArg) {\n    var result = initializer ? initializer() : {};\n    iteratee = baseCallback(iteratee, thisArg, 3);\n\n    if (isArray(collection)) {\n      var index = -1,\n          length = collection.length;\n\n      while (++index < length) {\n        var value = collection[index];\n        setter(result, value, iteratee(value, index, collection), collection);\n      }\n    } else {\n      baseEach(collection, function(value, key, collection) {\n        setter(result, value, iteratee(value, key, collection), collection);\n      });\n    }\n    return result;\n  };\n}\n\nmodule.exports = createAggregator;\n"]},"metadata":{},"sourceType":"script"}